package tp2;

public class BaseList<T> {
	private T value;
	private BaseList<T> next;
	
	public BaseList() {
		this(null, null);
	}
	
	public BaseList(T v) {
		this(v, null);
	}
	
	public BaseList(T v, BaseList<T> n) {
		value = v;
		next = n;
	}
	
	public BaseList<T> add(T value) {
		return new BaseList<T>(value, next);
	}
	
	public BaseList<T> remove(T v) {
		if (value.equals(v))
			return next;
		if (next != null)
			next = next.remove(v);
		return this;
	}
	
	public boolean contains(T v) {
		if (value.equals(v))
			return true;
		if (next != null)
			return next.contains(v);
		return false;
	}
	
	public int count (Condition<T> condition) {
		return count(condition, this);
	}

	private int count (Condition<T> condition, BaseList<T> n) {
		if (n == null)
			return 0;
		return condition.eval(n.value) ? 1 + count(condition, n.next) : count(condition, n.next);
	}
	
	public BaseList<T> filter(Condition<T> condition) {
		return filter(condition, this);
	}
	
	private BaseList<T> filter(Condition<T> condition, BaseList<T> n) {
		if (n == null)
			return new BaseList<T>();
		BaseList<T> list = filter(condition, n.next);
		if (condition.eval(n.value))
			list.add(n.value);
		return list;
	}
	
	public <S> BaseList<S> map(Function<T,S>) {
		
	}
}
